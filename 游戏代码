<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D网球砸怪兽</title>
    <style>
        body{margin:0;overflow:hidden;background:#000}
        #fire-button,#auto-aim-button{position:absolute;bottom:20px;width:80px;height:80px;border-radius:50%;display:flex;justify-content:center;align-items:center;color:white;cursor:pointer;background:rgba(255,255,255,0.3);font-size:16px}
        #fire-button{right:20px}
        #auto-aim-button{left:20px}
        #ammo-count{position:absolute;top:50px;width:100%;text-align:center;z-index:100;color:white;font:18px Arial;text-shadow:0 0 5px rgba(0,0,0,0.8)}
        #crosshair{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);width:20px;height:20px;border:2px solid white;border-radius:50%;display:flex;justify-content:center;align-items:center}
        #crosshair::before,#crosshair::after{content:'';position:absolute;background:white}
        #crosshair::before{width:2px;height:10px}
        #crosshair::after{width:10px;height:2px}
        .modal{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:rgba(0,0,0,0.8);padding:20px;border-radius:10px;color:white;text-align:center;display:none}
        .modal input,.modal button{margin-top:10px;padding:5px}
        #show-rules{position:absolute;top:10px;right:10px;padding:15px 30px;font-size:18px}
    </style>
</head>
<body>
    <div id="ammo-count">弹药: 30</div>
    <div id="fire-button">发射</div>
    <div id="auto-aim-button">自动瞄准</div>
    <div id="crosshair"></div>
    <div id="ammo-prompt" class="modal">
        <p>弹药已用尽，输入密钥补充</p>
        <input type="text" id="key-input">
        <button id="key-submit">提交</button>
    </div>
    <div id="rules-modal" class="modal">
        <p>1. 瞄准：电脑鼠标移动十字线，按上键自动瞄准；手机触摸移动，点自动瞄准按钮</p>
        <p>2. 发射：电脑按空格，手机点发射按钮</p>
        <p>3. 缩放：电脑按+放大、-缩小</p>
        <p>4. 目标：击中飞碟得分</p>
        <button id="close-rules">关闭</button>
    </div>
    <button id="show-rules">规则</button>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/OrbitControls.js"></script>
    <script>
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x000000);
        const starGeometry = new THREE.BufferGeometry(), starPositions = [];
        for (let i = 0; i < 500; i++) {
            const x = (Math.random() - 0.5) * 100, y = (Math.random() - 0.5) * 100, z = (Math.random() - 0.5) * 100;
            starPositions.push(x, y, z);
        }
        starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starPositions, 3));
        scene.add(new THREE.Points(starGeometry, new THREE.PointsMaterial({ color: 0xffffff, size: 0.05 })));
        
        const camera = new THREE.PerspectiveCamera(75, innerWidth/innerHeight, 0.1, 1000);
        camera.position.z = 5;
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(innerWidth, innerHeight);
        renderer.shadowMap.enabled = true;
        document.body.appendChild(renderer.domElement);
        new THREE.OrbitControls(camera, renderer.domElement);
        
        scene.add(new THREE.AmbientLight(0xffffff, 0.2));
        const dirLight = new THREE.DirectionalLight(0xffffff, 0.8);
        dirLight.position.set(1, 1, 1);
        dirLight.castShadow = true;
        scene.add(dirLight);
        
        const barrel = new THREE.Mesh(
            new THREE.CylinderGeometry(0.05, 0.05, 0.5, 16),
            new THREE.MeshPhongMaterial({ color: 0x808080 })
        );
        barrel.position.z = -0.5;
        camera.add(barrel);
        
        const ufos = [];
        function createUfo() {
            if (ufos.length >= 3) return;
            const ufo = new THREE.Mesh(
                new THREE.TorusGeometry(0.5, 0.2, 16, 50),
                new THREE.MeshPhongMaterial({ color: 0x00ffff })
            );
            ufo.rotation.x = Math.PI/2;
            ufo.position.set(
                (Math.random() - 0.5) * 8,
                (Math.random() - 0.5) * 8,
                -5 - Math.random() * 3
            );
            ufo.castShadow = true;
            ufo.isDead = false;
            scene.add(ufo);
            ufos.push(ufo);
        }
        createUfo();
        
        const crosshairPosition = new THREE.Vector3(0, 0, -10);
        const tennisBalls = [];
        let ammoCount = 30, lastShotTime = 0;
        
        function createTennisBall() {
            const ball = new THREE.Mesh(
                new THREE.SphereGeometry(0.1, 16, 16),
                new THREE.MeshPhongMaterial({ color: 0x00ff00 })
            );
            ball.position.copy(camera.position);
            ball.castShadow = true;
            scene.add(ball);
            tennisBalls.push(ball);
            return ball;
        }
        
        function shootTennisBall() {
            const crosshair = document.getElementById('crosshair');
            const fireRect = document.getElementById('fire-button').getBoundingClientRect();
            const crossRect = crosshair.getBoundingClientRect();
            if (crossRect.left < fireRect.right && crossRect.right > fireRect.left && crossRect.top < fireRect.bottom && crossRect.bottom > fireRect.top) return;
            
            const now = Date.now();
            if (now - lastShotTime < 300 || ammoCount <= 0) return;
            
            ammoCount--;
            document.getElementById('ammo-count').textContent = `弹药: ${ammoCount}`;
            const ball = createTennisBall();
            
            const direction = new THREE.Vector3().copy(crosshairPosition).sub(ball.position).normalize();
            ball.velocity = direction.multiplyScalar(0.1);
            
            predictHit(ball, direction);
            
            const particles = new THREE.Points(
                new THREE.BufferGeometry().setFromPoints(
                    Array(50).fill().map(() => new THREE.Vector3().copy(ball.position))
                ),
                new THREE.PointsMaterial({ color: 0x00ff00, size: 0.05 })
            );
            scene.add(particles);
            const animateParticles = () => {
                particles.geometry.attributes.position.needsUpdate = false;
                particles.rotation.x += 0.01;
                requestAnimationFrame(animateParticles);
            };
            animateParticles();
            
            lastShotTime = now;
        }
        
        function predictHit(ball, dir) {
            for (let i = 0; i < 50; i++) {
                const pos = ball.position.clone().add(dir.clone().multiplyScalar(0.1 * i));
                for (const ufo of ufos) {
                    if (!ufo.isDead && pos.distanceTo(ufo.position) < 0.6) {
                        ufo.isDead = true;
                        return;
                    }
                }
            }
        }
        
        function checkCollision(ball, ufo) {
            return ball.position.distanceTo(ufo.position) < 0.6;
        }
        
        function createExplosion(pos) {
            const particles = new THREE.Points(
                new THREE.BufferGeometry().setFromPoints(
                    Array(100).fill().map(() => new THREE.Vector3(
                        pos.x + (Math.random() - 0.5) * 0.3,
                        pos.y + (Math.random() - 0.5) * 0.3,
                        pos.z + (Math.random() - 0.5) * 0.3
                    ))
                ),
                new THREE.PointsMaterial({ color: 0xffa500, size: 0.05, transparent: true, opacity: 1 })
            );
            scene.add(particles);
            let opacity = 1;
            const animate = () => {
                opacity -= 0.01;
                particles.material.opacity = opacity;
                if (opacity > 0) requestAnimationFrame(animate);
                else scene.remove(particles);
            };
            animate();
        }
        
        document.getElementById('fire-button').addEventListener('click', shootTennisBall);
        document.getElementById('fire-button').addEventListener('touchstart', shootTennisBall);
        
        const crosshair = document.getElementById('crosshair');
        let lastCrossPos = { left: '50%', top: '50%' };
        
        function updateCrosshair(e) {
            const rect = renderer.domElement.getBoundingClientRect();
            const x = e.clientX, y = e.clientY;
            crosshair.style.left = x + 'px';
            crosshair.style.top = y + 'px';
            
            const btnOver = isOverButton(x, y);
            if (btnOver) {
                crosshair.style.left = lastCrossPos.left;
                crosshair.style.top = lastCrossPos.top;
            } else {
                lastCrossPos = { left: x + 'px', top: y + 'px' };
            }
            
            const mouseX = (x - rect.left) / rect.width * 2 - 1;
            const mouseY = -(y - rect.top) / rect.height * 2 + 1;
            const vector = new THREE.Vector3(mouseX, mouseY, 0.5).unproject(camera);
            const dir = vector.sub(camera.position).normalize();
            const dist = -camera.position.z / dir.z;
            crosshairPosition.copy(camera.position).add(dir.multiplyScalar(dist));
        }
        
        function isOverButton(x, y) {
            const fireRect = document.getElementById('fire-button').getBoundingClientRect();
            const aimRect = document.getElementById('auto-aim-button').getBoundingClientRect();
            return (x >= fireRect.left && x <= fireRect.right && y >= fireRect.top && y <= fireRect.bottom) ||
                   (x >= aimRect.left && x <= aimRect.right && y >= aimRect.top && y <= aimRect.bottom);
        }
        
        document.addEventListener('mousemove', updateCrosshair);
        document.addEventListener('touchmove', (e) => { updateCrosshair(e.touches[0]); e.preventDefault(); });
        
        document.getElementById('key-submit').addEventListener('click', () => {
            if (document.getElementById('key-input').value === '6174') {
                ammoCount += 50;
                document.getElementById('ammo-count').textContent = `弹药: ${ammoCount}`;
                document.getElementById('ammo-prompt').style.display = 'none';
                document.getElementById('key-input').value = '';
            } else alert('密钥错误');
        });
        
        function autoAim() {
            const alive = ufos.filter(u => !u.dead);
            if (alive.length) {
                const closest = alive.reduce((a, b) => 
                    a.position.distanceTo(camera.position) < b.position.distanceTo(camera.position) ? a : b
                );
                crosshairPosition.copy(closest.position);
                const vector = new THREE.Vector3().copy(crosshairPosition).project(camera);
                const rect = renderer.domElement.getBoundingClientRect();
                crosshair.style.left = ((vector.x + 1) / 2 * rect.width + rect.left) + 'px';
                crosshair.style.top = (-(vector.y - 1) / 2 * rect.height + rect.top) + 'px';
            }
        }
        
        document.getElementById('auto-aim-button').addEventListener('click', autoAim);
        document.getElementById('auto-aim-button').addEventListener('touchstart', autoAim);
        
        document.addEventListener('keydown', (e) => {
            if (e.key === ' ') shootTennisBall();
            else if (e.key === 'ArrowUp') autoAim();
            else if (e.key === '+') camera.position.z *= 0.9;
            else if (e.key === '-') camera.position.z /= 0.9;
        });
        
        const rulesModal = document.getElementById('rules-modal');
        document.getElementById('show-rules').addEventListener('click', () => rulesModal.style.display = 'block');
        document.getElementById('close-rules').addEventListener('click', () => rulesModal.style.display = 'none');
        
        function animate() {
            requestAnimationFrame(animate);
            if (ufos.filter(u => !u.isDead).length < 2 && ammoCount >= 5) 
                for (let i = 0; i < Math.min(3, 5 - ufos.filter(u => !u.isDead).length); i++) createUfo();
            
            for (let i = tennisBalls.length - 1; i >= 0; i--) {
                const ball = tennisBalls[i];
                ball.position.add(ball.velocity);
                for (let j = ufos.length - 1; j >= 0; j--) {
                    const ufo = ufos[j];
                    if (!ufo.isDead && checkCollision(ball, ufo)) {
                        createExplosion(ball.position);
                        scene.remove(ball);
                        tennisBalls.splice(i, 1);
                        scene.remove(ufo);
                        ufos.splice(j, 1);
                        if (ammoCount >= 5 && ufos.filter(u => !u.isDead).length < 2) 
                            for (let k = 0; k < Math.min(3, 5 - ufos.filter(u => !u.isDead).length); k++) createUfo();
                        break;
                    }
                }
            }
            renderer.render(scene, camera);
        }
        animate();
        
        window.addEventListener('resize', () => {
            camera.aspect = innerWidth / innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(innerWidth, innerHeight);
        });
    </script>
</body>
</html>
